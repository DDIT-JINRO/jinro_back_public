<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.admin.las.service.impl.UsageStatsMapper">
	<select id="dailyUserInquiry" resultType="kr.or.ddit.admin.las.service.UsageStatsVO">
	    <![CDATA[
	    WITH date_list AS (
	        SELECT TRUNC(SYSDATE) - (LEVEL - 1) AS login_date
	        FROM dual
	        CONNECT BY LEVEL <= 14
	    ),
	    daily_login_counts AS (
	        SELECT
	            TO_CHAR(ll.LL_CREATED_AT, 'YYYY-MM-DD') AS login_date,
	            COUNT(DISTINCT ll.MEM_ID) AS user_count
	        FROM LOGIN_LOG ll
	        JOIN MEMBER m ON ll.MEM_ID = m.MEM_ID
	        WHERE ll.LL_STATUS = 'I'
	          AND ll.LL_CREATED_AT >= TRUNC(SYSDATE) - 13
	          AND ll.LL_CREATED_AT < TRUNC(SYSDATE) + 1
	    ]]>
	    <if test="gender != null and gender eq 'G11001'">
	        AND m.MEM_GEN = 'G11001'
	    </if>
	    <if test="gender != null and gender eq 'G11002'">
	        AND m.MEM_GEN = 'G11002'
	    </if>
	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
	        AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
	    </if>
	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
	        AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
	    </if>
	    <![CDATA[
	        GROUP BY TO_CHAR(ll.LL_CREATED_AT, 'YYYY-MM-DD')
	    )
	    SELECT
	        TO_CHAR(d.login_date, 'YYYY-MM-DD') AS login_date,
	        CASE
	            WHEN d.login_date >= TRUNC(SYSDATE) - 6 THEN 'THIS_WEEK'
	            WHEN d.login_date >= TRUNC(SYSDATE) - 13 THEN 'LAST_WEEK'
	        END AS week_type,
	        NVL(l.user_count, 0) AS user_count
	    FROM date_list d
	    LEFT JOIN daily_login_counts l
	      ON TO_CHAR(d.login_date, 'YYYY-MM-DD') = l.login_date
	    ORDER BY d.login_date
	    ]]>
	</select>


	<select id="monthlyUserInquiry" resultType="kr.or.ddit.admin.las.service.UsageStatsVO">
	    WITH params AS (
	        SELECT TRUNC(SYSDATE, 'YY') AS current_start_date,
	               ADD_MONTHS(TRUNC(SYSDATE, 'YY'), 12) AS current_end_date,
	               ADD_MONTHS(TRUNC(SYSDATE, 'YY'), -12) AS prev_start_date,
	               TRUNC(SYSDATE, 'YY') AS prev_end_date
	        FROM DUAL
	    )
	    -- 올해 월별 접속자 수
	    SELECT
	        TO_CHAR(ll.LL_CREATED_AT, 'YYYY-MM') AS loginDate,
	        'THIS_YEAR' AS periodType,
	        COUNT(DISTINCT ll.MEM_ID) AS userCount
	    FROM LOGIN_LOG ll
	    JOIN MEMBER m ON ll.MEM_ID = m.MEM_ID, params p
	    WHERE ll.LL_STATUS = 'I'
	          AND ll.LL_CREATED_AT &gt;= p.current_start_date
	          AND ll.LL_CREATED_AT &lt; p.current_end_date
	    <if test="gender != null and gender eq 'G11001'">
	        AND m.MEM_GEN = 'G11001'
	    </if>
	    <if test="gender != null and gender eq 'G11002'">
	        AND m.MEM_GEN = 'G11002'
	    </if>
	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
	        AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
	    </if>
	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
	        AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
	    </if>
	    GROUP BY TO_CHAR(ll.LL_CREATED_AT, 'YYYY-MM')
	    UNION ALL
	    -- 작년 월별 접속자 수
	    SELECT
	        TO_CHAR(ADD_MONTHS(ll.LL_CREATED_AT, 12), 'YYYY-MM') AS loginDate,
	        'LAST_YEAR' AS periodType,
	        COUNT(DISTINCT ll.MEM_ID) AS userCount
	    FROM LOGIN_LOG ll
	    JOIN MEMBER m ON ll.MEM_ID = m.MEM_ID, params p
	    WHERE ll.LL_STATUS = 'I'
	          AND ll.LL_CREATED_AT &gt;= p.prev_start_date
	          AND ll.LL_CREATED_AT &lt; p.prev_end_date
	    <if test="gender != null and gender eq 'G11001'">
	        AND m.MEM_GEN = 'G11001'
	    </if>
	    <if test="gender != null and gender eq 'G11002'">
	        AND m.MEM_GEN = 'G11002'
	    </if>
	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
	        AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
	    </if>
	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
	        AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
	    </if>
	    GROUP BY TO_CHAR(ADD_MONTHS(ll.LL_CREATED_AT, 12), 'YYYY-MM')
	    ORDER BY loginDate ASC
	</select>

	<select id="customUserInquiry" resultType="kr.or.ddit.admin.las.service.UsageStatsVO">
	    WITH params AS (
	        SELECT TO_DATE(#{startDate}, 'YYYY-MM-DD') AS current_start_date,
	               TO_DATE(#{endDate}, 'YYYY-MM-DD') + 1 AS current_end_date,
	               ADD_MONTHS(TO_DATE(#{startDate}, 'YYYY-MM-DD'), -12) AS prev_start_date,
	               ADD_MONTHS(TO_DATE(#{endDate}, 'YYYY-MM-DD'), -12) + 1 AS prev_end_date
	        FROM DUAL
	    )
	    -- 선택 기간의 올해 데이터
	    SELECT
	        TO_CHAR(ll.LL_CREATED_AT, 'YYYY-MM-DD') AS loginDate,
	        'THIS_YEAR' AS periodType,
	        COUNT(DISTINCT ll.MEM_ID) AS userCount
	    FROM LOGIN_LOG ll
	    JOIN MEMBER m ON ll.MEM_ID = m.MEM_ID, params p
	    WHERE ll.LL_STATUS = 'I'
	          AND ll.LL_CREATED_AT &gt;= p.current_start_date
	          AND ll.LL_CREATED_AT &lt; p.current_end_date
	    <if test="gender != null and gender == 'G11001'">
	        AND m.MEM_GEN = 'G11001'
	    </if>
	    <if test="gender != null and gender == 'G11002'">
	        AND m.MEM_GEN = 'G11002'
	    </if>
	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
	        AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
	    </if>
	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
	        AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
	    </if>
	    GROUP BY TO_CHAR(ll.LL_CREATED_AT, 'YYYY-MM-DD')
	    UNION ALL
	    -- 선택 기간의 작년 데이터
	    SELECT
	        TO_CHAR(ADD_MONTHS(ll.LL_CREATED_AT, 12), 'YYYY-MM-DD') AS loginDate,
	        'LAST_YEAR' AS periodType,
	        COUNT(DISTINCT ll.MEM_ID) AS userCount
	    FROM LOGIN_LOG ll
	    JOIN MEMBER m ON ll.MEM_ID = m.MEM_ID, params p
	    WHERE ll.LL_STATUS = 'I'
	          AND ll.LL_CREATED_AT &gt;= p.prev_start_date
	          AND ll.LL_CREATED_AT &lt; p.prev_end_date
	    <if test="gender != null and gender == 'G11001'">
	        AND m.MEM_GEN = 'G11001'
	    </if>
	    <if test="gender != null and gender == 'G11002'">
	        AND m.MEM_GEN = 'G11002'
	    </if>
	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
	        AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
	    </if>
	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
	        AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
	    </if>
	    GROUP BY TO_CHAR(ADD_MONTHS(ll.LL_CREATED_AT, 12), 'YYYY-MM-DD')
	</select>

	<select id="dailyPageVisitCount" resultType="kr.or.ddit.admin.las.service.VisitVO">
		<![CDATA[
	    SELECT *
	    FROM (
	        SELECT PL_TITLE AS plTitle, COUNT(*) AS userCount
	        FROM PAGE_LOG pl
	        JOIN MEMBER m ON pl.MEM_ID = m.MEM_ID
	        WHERE TRUNC(PL_CREATED_AT) = TRUNC(SYSDATE)
	    ]]>
	        <if test="gender != null and gender eq 'G11001'">
	            <![CDATA[ AND m.MEM_GEN = 'G11001' ]]>
	        </if>
	        <if test="gender != null and gender eq 'G11002'">
	            <![CDATA[ AND m.MEM_GEN = 'G11002' ]]>
	        </if>
	        <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
		    	AND TRUNC(MONTHS_BETWEEN(pl.PL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
		    </if>
		    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
		    	AND TRUNC(MONTHS_BETWEEN(pl.PL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
		    </if>
	    <![CDATA[
	        GROUP BY PL_TITLE
	        ORDER BY userCount DESC
	    )
	    WHERE ROWNUM <= 10
	    ]]>
	</select>


	<select id="monthlyPageVisitCount" resultType="kr.or.ddit.admin.las.service.VisitVO">
	    <![CDATA[
	    SELECT *
	    FROM (
	        SELECT PL_TITLE AS plTitle, COUNT(*) AS userCount
	        FROM PAGE_LOG pl
	        JOIN MEMBER m ON pl.MEM_ID = m.MEM_ID
	        WHERE PL_CREATED_AT >= TRUNC(SYSDATE, 'MM')
	          AND PL_CREATED_AT < ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 1)
	    ]]>
	        <if test="gender != null and gender eq 'G11001'">
	            <![CDATA[ AND m.MEM_GEN = 'G11001' ]]>
	        </if>
	        <if test="gender != null and gender eq 'G11002'">
	            <![CDATA[ AND m.MEM_GEN = 'G11002' ]]>
	        </if>
      	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
		    	AND TRUNC(MONTHS_BETWEEN(pl.PL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
		    </if>
		    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
		    	AND TRUNC(MONTHS_BETWEEN(pl.PL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
		    </if>
	    <![CDATA[
	        GROUP BY PL_TITLE
	        ORDER BY userCount DESC
	    )
	    WHERE ROWNUM <= 10
	    ]]>
	</select>



	<select id="customPageVisitCount" resultType="kr.or.ddit.admin.las.service.VisitVO">
	    <![CDATA[
	    SELECT *
	    FROM (
	        SELECT PL_TITLE AS plTitle, COUNT(*) AS userCount
	        FROM PAGE_LOG pl
	        JOIN MEMBER m ON pl.MEM_ID = m.MEM_ID
	        WHERE PL_CREATED_AT >= TO_DATE(#{startDate}, 'YYYY-MM-DD')
	          AND PL_CREATED_AT < TO_DATE(#{endDate}, 'YYYY-MM-DD')
	    ]]>
	        <if test="gender != null and gender eq 'G11001'">
	            <![CDATA[ AND m.MEM_GEN = 'G11001' ]]>
	        </if>
	        <if test="gender != null and gender eq 'G11002'">
	            <![CDATA[ AND m.MEM_GEN = 'G11002' ]]>
	        </if>
           	<if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
		    	AND TRUNC(MONTHS_BETWEEN(pl.PL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
		    </if>
		    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
		    	AND TRUNC(MONTHS_BETWEEN(pl.PL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
		    </if>
	    <![CDATA[
	        GROUP BY PL_TITLE
	        ORDER BY userCount DESC
	    )
	    WHERE ROWNUM <= 10
	    ]]>
	</select>

	<select id="getSingleUserActivityYoY" parameterType="map" resultType="map">
	    WITH params AS (
	        SELECT
	            <choose>
	                <when test="type == 'daily'">TRUNC(SYSDATE) - 6</when>
	                <when test="type == 'monthly'">TRUNC(SYSDATE, 'YY')</when>
	                <when test="type == 'custom'">TO_DATE(#{startDate}, 'YYYY-MM-DD')</when>
	            </choose> AS start_date,
	            <choose>
	                <when test="type == 'daily'">TRUNC(SYSDATE) + 1</when>
	                <when test="type == 'monthly'">ADD_MONTHS(TRUNC(SYSDATE, 'YY'), 12)</when>
	                <when test="type == 'custom'">TO_DATE(#{endDate}, 'YYYY-MM-DD') + 1</when>
	            </choose> AS end_date
	        FROM DUAL
	    )
	    -- 올해 데이터 조회
	    SELECT 'current' AS "gubun", LL_CREATED_AT AS "accessTime"
	    FROM LOGIN_LOG, params
	    WHERE MEM_ID = #{memId}
	      AND LL_CREATED_AT &gt;= params.start_date
	      AND LL_CREATED_AT &lt; params.end_date
	    UNION ALL
	    -- 작년 데이터 조회
	    SELECT 'previous' AS "gubun", LL_CREATED_AT AS "accessTime"
	    FROM LOGIN_LOG, params
	    WHERE MEM_ID = #{memId}
	      AND LL_CREATED_AT &gt;= ADD_MONTHS(params.start_date, -12)
	      AND LL_CREATED_AT &lt; ADD_MONTHS(params.end_date, -12)
	</select>
</mapper>