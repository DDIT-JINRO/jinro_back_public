<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.admin.las.service.impl.UsageStatsMapper">
	<select id="dailyUserInquiry" resultType="kr.or.ddit.admin.las.service.UsageStatsVO">
	    <![CDATA[
	    WITH date_list AS (
	        SELECT TRUNC(SYSDATE) - (LEVEL - 1) AS login_date
	        FROM dual
	        CONNECT BY LEVEL <= 7
	    ),
	    daily_login_counts AS (
	        SELECT
	            TO_CHAR(ll.LL_CREATED_AT, 'YYYY-MM-DD') AS login_date,
	            COUNT(DISTINCT ll.MEM_ID) AS user_count
	        FROM LOGIN_LOG ll
	        JOIN MEMBER m ON ll.MEM_ID = m.MEM_ID
	        WHERE ll.LL_STATUS = 'I'
	          AND ll.LL_CREATED_AT >= TRUNC(SYSDATE) - 6
	          AND ll.LL_CREATED_AT < TRUNC(SYSDATE) + 1
	    ]]>
		<if test="gender != null and gender eq 'G11001'">
			AND m.MEM_GEN = 'G11001'
		</if>
		<if test="gender != null and gender eq 'G11002'">
			AND m.MEM_GEN = 'G11002'
		</if>
		<if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
	    	AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
	    </if>
	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
	    	AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
	    </if>
	    <![CDATA[
	        GROUP BY TO_CHAR(ll.LL_CREATED_AT, 'YYYY-MM-DD')
	    )
	    SELECT
	        TO_CHAR(d.login_date, 'YYYY-MM-DD') AS login_date,
	        NVL(l.user_count, 0) AS user_count
	    FROM date_list d
	    LEFT JOIN daily_login_counts l
	      ON TO_CHAR(d.login_date, 'YYYY-MM-DD') = l.login_date
	    ORDER BY d.login_date
	    ]]>
	</select>


	<select id="monthlyUserInquiry" resultType="kr.or.ddit.admin.las.service.UsageStatsVO">
	    <![CDATA[
		WITH month_list AS (
		    SELECT ADD_MONTHS(TRUNC(SYSDATE, 'YY'), LEVEL - 1) AS login_month_date
		    FROM dual
		    CONNECT BY LEVEL <= MONTHS_BETWEEN(TRUNC(SYSDATE, 'MM'), TRUNC(SYSDATE, 'YY')) + 1
		),
		monthly_login_counts AS (
		    SELECT
		        TO_CHAR(ll.LL_CREATED_AT, 'YYYY-MM') AS login_month,
		        COUNT(DISTINCT ll.MEM_ID) AS user_count
		    FROM LOGIN_LOG ll
		    JOIN MEMBER m ON ll.MEM_ID = m.MEM_ID
		    WHERE ll.LL_STATUS = 'I'
		      AND ll.LL_CREATED_AT >= TRUNC(SYSDATE, 'YY')
		      AND ll.LL_CREATED_AT < ADD_MONTHS(TRUNC(SYSDATE, 'YY'), 12)
		]]>
		    <if test="gender != null and gender eq 'G11001'">
		        AND m.MEM_GEN = 'G11001'
		    </if>
		    <if test="gender != null and gender eq 'G11002'">
		        AND m.MEM_GEN = 'G11002'
		    </if>
		    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
		    	AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
		    </if>
		    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
		    	AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
		    </if>
		<![CDATA[
		    GROUP BY TO_CHAR(ll.LL_CREATED_AT, 'YYYY-MM')
		)
		SELECT
		    TO_CHAR(d.login_month_date, 'YYYY-MM') AS loginDate,
		    NVL(l.user_count, 0) AS userCount
		FROM month_list d
		LEFT JOIN monthly_login_counts l
		  ON TO_CHAR(d.login_month_date, 'YYYY-MM') = l.login_month
		ORDER BY d.login_month_date
		]]>

	</select>

	<select id="customUserInquiry" resultType="kr.or.ddit.admin.las.service.UsageStatsVO">
		<![CDATA[
		WITH date_list AS (
		    SELECT TRUNC(TO_DATE(#{startDate}, 'YYYY-MM-DD')) + LEVEL - 1 AS login_date
		    FROM dual
		    CONNECT BY LEVEL <= TRUNC(TO_DATE(#{endDate}, 'YYYY-MM-DD'))
		                        - TRUNC(TO_DATE(#{startDate}, 'YYYY-MM-DD')) + 1
		),

		daily_login_counts AS (
		    SELECT
		        TO_CHAR(ll.LL_CREATED_AT, 'YYYY-MM-DD') AS login_date,
		        COUNT(DISTINCT ll.MEM_ID) AS user_count
		    FROM LOGIN_LOG ll
		        JOIN MEMBER m ON ll.MEM_ID = m.MEM_ID
		    WHERE ll.LL_STATUS = 'I'
		      AND ll.LL_CREATED_AT >= TO_DATE(#{startDate}, 'YYYY-MM-DD')
		      AND ll.LL_CREATED_AT < TO_DATE(#{endDate}, 'YYYY-MM-DD') + 1
		 ]]>
		    <if test="gender != null and gender == 'G11001'">
		        AND m.MEM_GEN = 'G11001'
		    </if>
		    <if test="gender != null and gender == 'G11002'">
		        AND m.MEM_GEN = 'G11002'
		    </if>
			<if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
		    	AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
		    </if>
		    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
		    	AND TRUNC(MONTHS_BETWEEN(ll.LL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
		    </if>
		<![CDATA[
		    GROUP BY TO_CHAR(ll.LL_CREATED_AT, 'YYYY-MM-DD')
		)
		SELECT
		    TO_CHAR(d.login_date, 'YYYY-MM-DD') AS loginDate,
		    NVL(l.user_count, 0) AS userCount
		FROM date_list d
		LEFT JOIN daily_login_counts l
		  ON TO_CHAR(d.login_date, 'YYYY-MM-DD') = l.login_date
		ORDER BY d.login_date
		]]>
	</select>

	<select id="liveUserList" parameterType="map" resultType="map">
		SELECT
		*
		FROM (
		SELECT
		ROW_NUMBER() OVER (ORDER BY A.MEM_ID DESC) AS RNUM,
		A.MEM_ID,
		A.MEM_NAME,
		A.LOGIN_TYPE,
		A.MEM_STUDENT,
		A.MEM_GEN,
		CASE WHEN
		A.LOGIN_TYPE = 'G33001' THEN '일반'
		WHEN A.LOGIN_TYPE = 'G33002' THEN
		'네이버'
		WHEN A.LOGIN_TYPE = 'G33003' THEN '카카오'
		ELSE '그 외 로그인'
		END AS
		LOGIN_TYPE_NAME,
		CASE WHEN A.MEM_STUDENT = 'N' THEN '대학생'
		WHEN
		A.MEM_STUDENT = 'Y' THEN '청소년'
		ELSE '일반인'
		END AS MEM_STUDENT_NAME,
		CASE
		WHEN TO_CHAR(A.MEM_GEN) = 'G11001' THEN '남'
		WHEN TO_CHAR(A.MEM_GEN) =
		'G11002' THEN '여'
		ELSE '그 외 성별'
		END AS MEM_GEN_NAME
		FROM
		MEMBER A
		INNER
		JOIN (
		SELECT
		MEM_ID
		FROM
		LOGIN_LOG
		GROUP BY
		MEM_ID
		HAVING
		COUNT(CASE WHEN
		LL_STATUS = 'I' THEN 1 END) > COUNT(CASE WHEN LL_STATUS = 'O'
		THEN 1
		END)
		) B ON A.MEM_ID = B.MEM_ID
		<where>
			<if test="gen != null and gen != ''">
				AND A.MEM_GEN = #{gen}
			</if>
			<if test="loginType != null and loginType != ''">
				AND A.LOGIN_TYPE = #{loginType}
			</if>
			<if test="keyword != null and keyword != ''">
				AND (
				A.MEM_NAME LIKE '%' || #{keyword} || '%'
				OR A.MEM_ID
				LIKE '%' || #{keyword} || '%'
				)
			</if>
		</where>
		ORDER BY A.MEM_ID DESC
		)
		WHERE RNUM BETWEEN #{startNo} AND #{endNo}
	</select>
	<select id="liveUserListCount" parameterType="map"
		resultType="int">
		SELECT
		COUNT(*)
		FROM
		MEMBER A
		INNER JOIN (
		SELECT
		MEM_ID
		FROM
		LOGIN_LOG
		GROUP
		BY
		MEM_ID
		HAVING
		COUNT(CASE WHEN LL_STATUS = 'I' THEN 1 END) > COUNT(CASE
		WHEN LL_STATUS = 'O'
		THEN 1 END)
		) B ON A.MEM_ID = B.MEM_ID
		<where>
			<if test="gen != null and gen != ''">
				AND A.MEM_GEN = #{gen}
			</if>
			<if test="loginType != null and loginType != ''">
				AND A.LOGIN_TYPE = #{loginType}
			</if>
			<if test="keyword != null and keyword != ''">
				AND (
				A.MEM_NAME LIKE '%' || #{keyword} || '%'
				OR A.MEM_ID
				LIKE '%' || #{keyword} || '%'
				)
			</if>
		</where>
	</select>

	<select id="dailyPageVisitCount" resultType="kr.or.ddit.admin.las.service.VisitVO">
		<![CDATA[
	    SELECT *
	    FROM (
	        SELECT PL_TITLE AS plTitle, COUNT(*) AS userCount
	        FROM PAGE_LOG pl
	        JOIN MEMBER m ON pl.MEM_ID = m.MEM_ID
	        WHERE TRUNC(PL_CREATED_AT) = TRUNC(SYSDATE)
	    ]]>
	        <if test="gender != null and gender eq 'G11001'">
	            <![CDATA[ AND m.MEM_GEN = 'G11001' ]]>
	        </if>
	        <if test="gender != null and gender eq 'G11002'">
	            <![CDATA[ AND m.MEM_GEN = 'G11002' ]]>
	        </if>
	        <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
		    	AND TRUNC(MONTHS_BETWEEN(pl.PL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
		    </if>
		    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
		    	AND TRUNC(MONTHS_BETWEEN(pl.PL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
		    </if>
	    <![CDATA[
	        GROUP BY PL_TITLE
	        ORDER BY userCount DESC
	    )
	    WHERE ROWNUM <= 10
	    ]]>
	</select>


	<select id="monthlyPageVisitCount" resultType="kr.or.ddit.admin.las.service.VisitVO">
	    <![CDATA[
	    SELECT *
	    FROM (
	        SELECT PL_TITLE AS plTitle, COUNT(*) AS userCount
	        FROM PAGE_LOG pl
	        JOIN MEMBER m ON pl.MEM_ID = m.MEM_ID
	        WHERE PL_CREATED_AT >= TRUNC(SYSDATE, 'MM')
	          AND PL_CREATED_AT < ADD_MONTHS(TRUNC(SYSDATE, 'MM'), 1)
	    ]]>
	        <if test="gender != null and gender eq 'G11001'">
	            <![CDATA[ AND m.MEM_GEN = 'G11001' ]]>
	        </if>
	        <if test="gender != null and gender eq 'G11002'">
	            <![CDATA[ AND m.MEM_GEN = 'G11002' ]]>
	        </if>
      	    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
		    	AND TRUNC(MONTHS_BETWEEN(pl.PL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
		    </if>
		    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
		    	AND TRUNC(MONTHS_BETWEEN(pl.PL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
		    </if>
	    <![CDATA[
	        GROUP BY PL_TITLE
	        ORDER BY userCount DESC
	    )
	    WHERE ROWNUM <= 10
	    ]]>
	</select>



	<select id="customPageVisitCount" resultType="kr.or.ddit.admin.las.service.VisitVO">
	    <![CDATA[
	    SELECT *
	    FROM (
	        SELECT PL_TITLE AS plTitle, COUNT(*) AS userCount
	        FROM PAGE_LOG pl
	        JOIN MEMBER m ON pl.MEM_ID = m.MEM_ID
	        WHERE PL_CREATED_AT >= TO_DATE(#{startDate})
	          AND PL_CREATED_AT < TO_DATE(#{endDate})
	    ]]>
	        <if test="gender != null and gender eq 'G11001'">
	            <![CDATA[ AND m.MEM_GEN = 'G11001' ]]>
	        </if>
	        <if test="gender != null and gender eq 'G11002'">
	            <![CDATA[ AND m.MEM_GEN = 'G11002' ]]>
	        </if>
           	<if test="ageGroup != null and ageGroup != '' and ageGroup eq 'teen'">
		    	AND TRUNC(MONTHS_BETWEEN(pl.PL_CREATED_AT, m.MEM_BIRTH) / 12) &lt;= 19
		    </if>
		    <if test="ageGroup != null and ageGroup != '' and ageGroup eq 'youth'">
		    	AND TRUNC(MONTHS_BETWEEN(pl.PL_CREATED_AT, m.MEM_BIRTH) / 12) &gt;= 20
		    </if>
	    <![CDATA[
	        GROUP BY PL_TITLE
	        ORDER BY userCount DESC
	    )
	    WHERE ROWNUM <= 10
	    ]]>
	</select>

	<select id="getSingleUserActivityYoY" parameterType="map" resultType="map">
	    WITH params AS (
	        SELECT
	            <choose>
	                <when test="type == 'daily'">TRUNC(SYSDATE) - 6</when>
	                <when test="type == 'monthly'">TRUNC(SYSDATE, 'YY')</when>
	                <when test="type == 'custom'">TO_DATE(#{startDate}, 'YYYY-MM-DD')</when>
	            </choose> AS start_date,
	            <choose>
	                <when test="type == 'daily'">TRUNC(SYSDATE) + 1</when>
	                <when test="type == 'monthly'">ADD_MONTHS(TRUNC(SYSDATE, 'YY'), 12)</when>
	                <when test="type == 'custom'">TO_DATE(#{endDate}, 'YYYY-MM-DD') + 1</when>
	            </choose> AS end_date
	        FROM DUAL
	    )
	    -- 올해 데이터 조회
	    SELECT 'current' AS "gubun", LL_CREATED_AT AS "accessTime"
	    FROM LOGIN_LOG, params
	    WHERE MEM_ID = #{memId}
	      AND LL_CREATED_AT &gt;= params.start_date
	      AND LL_CREATED_AT &lt; params.end_date
	    UNION ALL
	    -- 작년 데이터 조회
	    SELECT 'previous' AS "gubun", LL_CREATED_AT AS "accessTime"
	    FROM LOGIN_LOG, params
	    WHERE MEM_ID = #{memId}
	      AND LL_CREATED_AT &gt;= ADD_MONTHS(params.start_date, -12)
	      AND LL_CREATED_AT &lt; ADD_MONTHS(params.end_date, -12)
	</select>
</mapper>